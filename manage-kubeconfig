#!/bin/bash
set -e

prog=${0##*/}
source $(dirname "$(readlink -f "$0")")/functions.sh

function usage ()
{
    cat << EOF
NAME
    manage-kubeconfig - Import, merge and remove kubeconfig files

SYNOPSIS
    $prog COMMAND [OPTIONS]

DESCRIPTION
    A bash script to manage kubeconfig files. It imports kubeconfig from the specifiend
    node, merges it with the main kubeconfig or removes the context.

COMMANDS
    import      - import new kubeconfig
    remove      - delete kubeconfig file
    help        - show this help or help for a subcommand
EOF
    exit 0
}

function usage_subcommand ()
{
    case "$1" in
        import)
            printf "NAME\n"
            printf "    $prog import [COMMANDS] [OPTIONS] HOST\n"
            printf "\n"
            printf "DESCRIPTION\n"
            printf "    Import kubeconfig from a host.\n"
            printf "\n"
            printf "COMMANDS\n"
            printf "    help - show this help\n"
            printf "\n"
            printf "OPTIONS\n"
            printf "    -f          Local filename           (default: $HOME/.kube/kc_\$HOST)\n"
            printf "    -h          Display help\n"
            printf "    -k          SSH Private Key          (default: $HOME/.ssh/id_rsa)\n"
            printf "    -m          Merge kubeconfig         (default: false)\n"
            printf "    -n          New name/context         (default: \$HOST)\n"
            printf "    -p          Sudo password            (default: none)\n"
            printf "    -S          Kubeconfig server/port   (default: \$HOST:6443)\n"
            printf "    -t          Type (k3s,rke1,rke2,k8s) (default: k8s)\n"
            printf "    -u          SSH user                 (default: sles)\n"
            printf "\n"
            printf "EXAMPLES\n"
            printf "    $prog import 192.168.200.201\n"
            printf "        Import k8s kubeconfig from the host 192.168.200.201 with default settings.\n"
            printf "\n"
            printf "    $prog import -m -t rke2 -f ~/.kube/config_192.169.200.202 192.168.200.202\n"
            printf "        Import RKE2 kubeconfig from node 192.168.200.201, merge it with the main.\n"
            printf "        kubeconfig. Save downloaded file to ~/.kube/config_192.168.200.202.\n"
            printf "\n"
            printf "    $prog import -m -u ubuntu -t k3s -S 192.168.200.200.sslip.io:6666 -n test 192.168.200.204\n"
            printf "        Import K3S kubeconfig and merge it. Use ubuntu user for ssh connection.\n"
            printf "        Rename default cluster and context to \"test\". Kubeconfig server is set to\n"
            printf "        a loadbalancer FQDN set in TLS-SAN and server port for cluster API.\n"
            printf "\n"
            ;;
        remove)
            printf "NAME\n"
            printf "    $prog remove [COMMANDS] cluster\n"
            printf "\n"
            printf "DESCRIPTION\n"
            printf "    Removes cluster context from the main kubeconfig.\n"
            printf "\n"
            printf "COMMANDS\n"
            printf "    help - show this help\n"
            printf "\n"
            printf "OPTIONS\n"
            printf "    -h          Display help\n"
            printf "\n"
            printf "EXAMPLE\n"
            printf "    $prog remove harvester\n"
            printf "        Remove cluster context \"harvester\" from the main kubeconfig file.\n"
            ;;
        *)
            printf "'$subcommand' is not a valid subcommand.\n"
            exit 1
            ;;
    esac
    exit 0
}

function remove ()
{
    while getopts ":h" opt
    do
        case "$opt" in
            h ) usage ;;
            * ) die "Unsupported option. Run 'manage-kubeconfig help remove'." ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ "$#" != 1 ]
    then
        printf "Please specify a single cluster name to remove.\n"
        printf "Run 'manage-kubeconfig help remove' for usage.\n"
        exit 1
    else
        CLUSTER_NAME=$1
    fi

    output "Removing ${CLUSTER_NAME} from ${KUBECONFIG}"
    kubectl config --kubeconfig="${KUBECONFIG}" delete-cluster "${CLUSTER_NAME}" && \
    kubectl config --kubeconfig="${KUBECONFIG}" delete-context "${CLUSTER_NAME}" && \
    kubectl config --kubeconfig="${KUBECONFIG}" unset users."${CLUSTER_NAME}" && \
    ok || output "Error removing cluster"
}

function import ()
{
    RKE1_KUBECONFIG_PATH="kube_config_cluster.yml"
    RKE2_KUBECONFIG_PATH="/etc/rancher/rke2/rke2.yaml"
    K3S_KUBECONFIG_PATH="/etc/rancher/k3s/k3s.yaml"

    while getopts ":f:k:n:p:S:t:u:mh" opt
    do
        case "$opt" in
            f ) KCFILE="${OPTARG}" ;;
            k ) PRIVKEY="${OPTARG}" ;;
            m ) MERGE=1 ;;
            n ) CLUSTER_NAME="${OPTARG}" ;;
            p ) SUDOPASS="${OPTARG}" ;;
            t ) KUBETYPE="${OPTARG}" ;;
	        S ) SERVER="${OPTARG}" ;;
            u ) LOGIN_USER="${OPTARG}" ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'manage-kubeconfig help create'." ;;
        esac
    done

    shift $((OPTIND - 1))

    # After all options are processed, make sure only one variable is left (vmname)
    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to import.\n"
        printf "Run 'manage-kubeconfig help import' for usage.\n"
        exit 1
    else
        VMNAME=$1
    fi

    if [ -z "${CLUSTER_NAME}" ]; then
        CLUSTER_NAME="${VMNAME}"
    fi

    if [ -z "${KCFILE}" ]; then
        KCFILE="${KUBEDIR}/${CLUSTER_NAME}.conf"
    fi
   
    if [ -z "${SERVER}" ]; then
	    SERVER="${VMNAME}:6443"
    fi	
   
    if [ ! -d "${KUBEDIR}" ]; then
        mkdir "${KUBEDIR}"
    fi          

    output "Importing kubeconfig file from ${VMNAME}"

    # Download the kubeconfig file
    if [[ $KUBETYPE == *"rke1"* ]]; then
        scp -q -o StrictHostKeyChecking=no -i "${PRIVKEY}" "${LOGIN_USER}@${VMNAME}:${RKE1_KUBECONFIG_PATH}" "${KCFILE}" > /dev/null 2>&1 || die "File not found!!"
    elif [[ $KUBETYPE == *"rke2"* ]]; then
        ssh -o StrictHostKeyChecking=no -i "${PRIVKEY}" "${LOGIN_USER}@${VMNAME}" "
            if sudo -n true 2>/dev/null; then
               sudo test -r ${RKE2_KUBECONFIG_PATH} && sudo cat ${RKE2_KUBECONFIG_PATH} || die \"File not found or not accessible\"
            else
              echo ${SUDOPASS} | sudo -S test -r ${RKE2_KUBECONFIG_PATH} && echo ${SUDOPASS} | sudo -S cat ${RKE2_KUBECONFIG_PATH} || die \"File not found or not accessible\"
            fi" > "${KCFILE}"
          if grep -q "File not found or not accessible" "${KCFILE}"; then
             output "File not found or not accessible."
             rm "${KCFILE}"
          else
             output "File copied successfully."
          fi
    elif [[ $KUBETYPE == *"k3s"* ]]; then
        ssh -o StrictHostKeyChecking=no -i "${PRIVKEY}" "${LOGIN_USER}@${VMNAME}" "
            if sudo -n true 2>/dev/null; then
               sudo test -r ${K3S_KUBECONFIG_PATH} && sudo cat ${K3S_KUBECONFIG_PATH} || die \"File not found or not accessible\"
            else
              echo ${SUDOPASS} | sudo -S test -r ${K3S_KUBECONFIG_PATH} && echo ${SUDOPASS} | sudo -S cat ${K3S_KUBECONFIG_PATH} || die \"File not found or not accessible\"
            fi" > "${KCFILE}"
          if grep -q "File not found or not accessible" "${KCFILE}"; then
             output "File not found or not accessible."
             rm "${KCFILE}"
          else
             output "File copied successfully."
          fi
    else
        scp -o StrictHostKeyChecking=no -i "${PRIVKEY}" "${LOGIN_USER}@${VMNAME}:${KUBECONFIG}" "${KCFILE}"  > /dev/null 2>&1 || die "File not found!!"
    fi
    
    sed -i -e "s/name: default$/name: $CLUSTER_NAME/g" \
       -e "s/user: default$/user: $CLUSTER_NAME/g" \
       -e "s/cluster: default$/cluster: $CLUSTER_NAME/g" \
       -e "s/current-context: default$/current-context: $CLUSTER_NAME/g" \
       -e "s/\"local\"$/$CLUSTER_NAME/g" \
       -e "s/kube-admin-local/$CLUSTER_NAME/g" \
       -e "s/127.0.0.1:6443/${SERVER}/g" "$KCFILE"

    # Backup the existing kubeconfig if it exists
    if [ -f "${KUBECONFIG}" ]; then
        cp "${KUBECONFIG}" "${KUBECONFIG}.bak"
        if [ "${MERGE}" -eq 1 ]; then
           KUBECONFIG="${KCFILE}:${KUBECONFIG}" kubectl config view --flatten > "${KUBECONFIG}_merged"
           mv "${KUBECONFIG}_merged" "${KUBECONFIG}"
           kubectl config --kubeconfig="${KUBECONFIG}" use-context "${CLUSTER_NAME}"
           chmod 600 "${KUBECONFIG}" 
           ok
        else
            ok
        fi
    else
        cp "${KCFILE}" "${KUBECONFIG}"
        ok
    fi
}

#--------------------------------------------------
# Main
#--------------------------------------------------

subcommand="${1:-none}"
[[ "${subcommand}" != "none" ]] && shift

case "${subcommand}" in
    none)
        usage
        ;;
    help)
        if [[ "${1:-none}" == "none" ]]; then
            usage
        elif [[ "$1" =~ ^import$|^remove$ ]]; then
            usage_subcommand "$1"
        else
            printf "'$1' is not a valid subcommand.\n\n"
            usage
        fi
        ;;
    import|remove)
        if [[ "${1:-none}" == "none" ]]; then
            usage_subcommand "${subcommand}"
        elif [[ "$1" =~ ^help$ ]]; then
            usage_subcommand "${subcommand}"
        else
            set_defaults
            set_custom_defaults
            "${subcommand}" "$@"
            exit $?
        fi
        ;;
    *)
        die "'${subcommand}' is not a valid subcommand.  See 'install-rke help' for a list of subcommands."
        ;;
esac

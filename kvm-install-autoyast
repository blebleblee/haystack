#!/bin/bash
set -e

prog=${0##*/}
source $(dirname "$(readlink -f "$0")")/functions.sh

function usage ()
{
    cat << EOF
name
    kvm-install-autoyast - Install virtual SLES guest using autoyast on a local KVM
    hypervisor.

SYNOPSIS
    $prog COMMAND [OPTIONS]

DESCRIPTION
    A bash wrapper around virt-install to build virtual machines on a local KVM
    hypervisor. You can run it as a normal user which will use qemu:///session
    to connect locally to your KVM domains.

COMMANDS
    create      - create a new guest domain
    remove      - delete a guest domain
    list        - list all domains, running and stopped
    help        - show this help or help for a subcommand
EOF
    exit 0
}

function usage_subcommand ()
{
    case "$1" in
        create)
            printf "NAME\n"
            printf "    $prog create [COMMANDS] [OPTIONS] VMNAME\n"
            printf "\n"
            printf "DESCRIPTION\n"
            printf "    Create a new guest domain.\n"
            printf "\n"
            printf "COMMANDS\n"
            printf "    help - show this help\n"
            printf "\n"
            printf "OPTIONS\n"
            printf "    -a          Autostart             (default: false)\n"
            printf "    -b          Bridge                (default: br0)\n"
            printf "    -c          Number of vCPUs       (default: 2)\n"
            printf "    -d          Disk Size (GB)        (default: 20)\n"
            printf "    -D          DNS Domain            (default: example.local)\n"
            printf "    -f          CPU Model / Feature   (default: host-passthrough)\n"
            printf "    -g          Graphics type         (default: spice)\n"
            printf "    -G          Default Gateway       (default: dhcp)\n"
            printf "    -h          Display help\n"
            printf "    -I          IP address/netmask    (default: dhcp)\n"
            printf "    -k          SSH Public Key        (default: $HOME/.ssh/id_rsa.pub)\n"
            printf "    -l          Location of Images    (default: $HOME/virt/images)\n"
            printf "    -L          Location of VMs       (default: $HOME/virt/vms)\n"
            printf "    -m          Memory Size (MB)      (default: 2048)\n"
            printf "    -M          Mac address           (default: auto-assigned)\n"
            printf "    -p          Console port          (default: auto)\n"
            printf "    -R          Resolver(s)           (default: dhcp)\n"
            printf "    -t          SLES version          (default: sles155)\n"
            printf "    -T          Timezone              (default: UTC)\n"
            printf "    -u          Custom user           (default: $USER)\n"
            printf "    -y          Assume yes to prompts (default: false)\n"
            printf "    -n          Assume no to prompts  (default: false)\n"
            printf "    -v          Be verbose\n"
            printf "\n"
            printf "DISTRIBUTIONS\n"
            printf "    NAME            DESCRIPTION                         LOGIN\n"
            printf "    sles153         SUSE Enterprise Linux 15 SP3        sles\n"
            printf "    sles154         SUSE Enterprise Linux 15 SP4        sles\n"
            printf "    sles155         SUSE Enterprise Linux 15 SP5        sles\n"
            printf "    sles156         SUSE Enterprise Linux 15 SP6        sles\n"
            printf "\n"
            printf "EXAMPLES\n"
            printf "    $prog create foo\n"
            printf "        Create VM with the default parameters: SLES 15 SP5, 2 vCPU, 2GB RAM,\n"
            printf "        20GB of disk capacity.\n"
            printf "\n"
            printf "    $prog create -c 4 -m 4096 -d 30 foo\n"
            printf "        Create VM with custom parameters: 4 vCPUs, 4GB RAM, and 30GB of disk\n"
            printf "        capacity.\n"
            printf "\n"
            printf "    $prog create -T UTC -u bar -v foo\n"
            printf "        Create a default VM with UTC timezone, custom user \"bar\" and be verbose.\n"
            printf "\n"
            printf "    $prog create -I 192.168.200.202/23 -R 192.168.200.2 -G 192.168.200.1 foo\n"
            printf "        Create VM with static network settings: IP address 192.168.200.202/23, DNS server 192.168.200.2\n"
            printf "        and default gateway 192.168.200.1. All three are required.\n"
            printf "\n"
            ;;
        remove)
            printf "NAME\n"
            printf "    $prog remove [COMMANDS] VMNAME\n"
            printf "\n"
            printf "DESCRIPTION\n"
            printf "    Destroys (stops) and undefines a guest domain. This also removes the\n"
            printf "    associated storage pool.\n"
            printf "\n"
            printf "COMMANDS\n"
            printf "    help - show this help\n"
            printf "\n"
            printf "OPTIONS\n"
            printf "    -l          Location of Images  (default: $HOME/virt/images)\n"
            printf "    -L          Location of VMs     (default: $HOME/virt/vms)\n"
            printf "    -v          Be verbose\n"
            printf "\n"
            printf "EXAMPLE\n"
            printf "    $prog remove foo\n"
            printf "        Remove (destroy and undefine) a guest domain.  WARNING: This will\n"
            printf "        delete the guest domain and any changes made inside it!\n"
            ;;
        list)
            printf "NAME\n"
            printf "    $prog list\n"
            printf "\n"
            printf "DESCRIPTION\n"
            printf "    Lists all running and stopped guest domains.\n"
            ;;
        *)
            printf "'$subcommand' is not a valid subcommand.\n"
            exit 1
            ;;
    esac
    exit 0
}

function set_vars ()
{
    # Create image directory if it doesn't already exist
    mkdir -p "${IMAGEDIR}"

    # Set variables based on $DISTRO
    # Use the command "osinfo-query os" to get the list of the accepted OS variants.
    case "$DISTRO" in
        sles153)
            SLES_VERSION=15-SP3
            SLES_DECIMAL=15.3
            ISOURL="http://cml.2464.cz/inst/SLE-15-SP3-Full-x86_64-GM-Media1"
            OS_VARIANT="sle15sp3"
            DISK_FORMAT=qcow2
            LOGIN_USER=sles
            ;;
        sles154)
            SLES_VERSION=15-SP4
            SLES_DECIMAL=15.4
            ISOURL="http://cml.2464.cz/inst/SLE-15-SP4-Full-x86_64-GM-Media1"
            OS_VARIANT="sle15sp4"
            DISK_FORMAT=qcow2
            LOGIN_USER=sles
            ;;
        sles155)
            SLES_VERSION=15-SP5
            SLES_DECIMAL=15.5
            ISOURL="http://cml.2464.cz/inst/SLE-15-SP5-Full-x86_64-GM-Media1"
            OS_VARIANT="sle15sp5"
            DISK_FORMAT=qcow2
            LOGIN_USER=sles
            ;;
        sles156)
            SLES_VERSION=15-SP6
            SLES_DECIMAL=15.6
            ISOURL="http://cml.2464.cz/inst/SLE-15-SP6-Full-x86_64-GM-Media1"
            OS_VARIANT="sle15sp6"
            DISK_FORMAT=qcow2
            LOGIN_USER=sles
            ;;    
        *)
            die "${DISTRO} not a supported OS.  Run 'kvm-install-autoyast create help'."
            ;;
    esac
}

function create_vm ()
{
    # Create image directory if it doesn't already exist
    mkdir -p "${VMDIR}"

    check_vmname_set

    # Start clean
    [ -d "${VMDIR}/${VMNAME}" ] && rm -rf "${VMDIR}"/"${VMNAME}"
    mkdir -p "${VMDIR}"/"${VMNAME}"

    pushd "${VMDIR}"/"${VMNAME}"

    # Create log file
    touch "${VMNAME}".log

    cat > "${AUTOYAST_DATA}" << _EOF_
<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <add-on>
    <add_on_products t="list">
      <listentry>
        <media_url>${RMT}/repo/SUSE/Products/SLE-Module-Basesystem/${SLES_VERSION}/x86_64/product/?credentials=Basesystem_Module_x86_64</media_url>
        <product>SLE-Module-Basesystem${SLES_VERSION}-Pool</product>
        <product_dir/>
      </listentry>
      <listentry>
        <media_url>${RMT}/repo/SUSE/Products/SLE-Module-Server-Applications/${SLES_VERSION}/x86_64/product/?credentials=Server_Applications_Module_x86_64</media_url>
        <product>SLE-Module-Server-Applications${SLES_VERSION}-Pool</product>
        <product_dir/>
      </listentry>
      <listentry>
        <media_url>${RMT}/repo/SUSE/Products/SLE-Module-Containers/${SLES_VERSION}/x86_64/product/?credentials=Basesystem_Module_x86_64</media_url>
        <product>SLE-Module-Containers${SLES_VERSION}-Pool</product>
        <product_dir/>
      </listentry>
    </add_on_products>
  </add-on>
  <firewall>
    <default_zone>public</default_zone>
    <enable_firewall t="boolean">false</enable_firewall>
    <log_denied_packets>off</log_denied_packets>
    <start_firewall t="boolean">false</start_firewall>
  </firewall>
  <general>
    <mode>
      <final_reboot config:type="boolean">true</final_reboot>
      <confirm t="boolean">false</confirm>
    </mode>
  </general>
_EOF_

    # If NET_IP is set configure static network, otherwise use dhcp
    if [ ! -z "${NET_IP}" ] && [ ! -z "${NET_GW}" ] && [ ! -z "${NET_DNS}"  ]
    then
        # Extract the IP address
        NET_IPADDRESS=$(echo "${NET_IP}" | cut -d'/' -f1)
        # Extract the netmask
        NET_NETMASK=$(echo "${NET_IP}" | cut -d'/' -f2)
        cat >> "${AUTOYAST_DATA}" << _EOF_
  <networking>
    <dns>
      <dhcp_hostname t="boolean">false</dhcp_hostname>
      <hostname>${VMNAME}</hostname>
      <nameservers t="list">
        <nameserver>${NET_DNS}</nameserver>
      </nameservers>
      <resolv_conf_policy>auto</resolv_conf_policy>
      <searchlist t="list">
        <search>${DNSDOMAIN}</search>
      </searchlist>
    </dns>
    <interfaces t="list">
      <interface>
        <bootproto>static</bootproto>
        <ipaddr>${NET_IPADDRESS}</ipaddr>
        <name>eth0</name>
        <prefixlen>${NET_NETMASK}</prefixlen>
        <startmode>auto</startmode>
      </interface>
    </interfaces>
    <ipv6 t="boolean">false</ipv6>
    <keep_install_network t="boolean">true</keep_install_network>
    <managed t="boolean">false</managed>
    <routing>
      <ipv4_forward t="boolean">false</ipv4_forward>
      <ipv6_forward t="boolean">false</ipv6_forward>
      <routes t="list">
        <route>
          <destination>default</destination>
          <device>-</device>
          <gateway>${NET_GW}</gateway>
          <netmask>-</netmask>
        </route>
      </routes>
    </routing>
  </networking>
_EOF_

    else
        cat >> "${AUTOYAST_DATA}" << _EOF_
  <networking>
    <dns>
      <dhcp_hostname t="boolean">false</dhcp_hostname>
      <hostname>${VMNAME}</hostname>
      <resolv_conf_policy>auto</resolv_conf_policy>
      <searchlist t="list">
        <search>${DNSDOMAIN}</search>
      </searchlist>
    </dns>
    <interfaces t="list">
      <interface>
        <bootproto>dhcp</bootproto>
        <name>eth0</name>
        <startmode>auto</startmode>
      </interface>
    </interfaces>
    <ipv6 t="boolean">false</ipv6>
    <keep_install_network t="boolean">true</keep_install_network>
    <managed t="boolean">false</managed>
    <routing>
      <ipv4_forward t="boolean">false</ipv4_forward>
      <ipv6_forward t="boolean">false</ipv6_forward>
    </routing>
  </networking>
_EOF_
    fi

    cat >> "${AUTOYAST_DATA}" << _EOF_
  <partitioning t="list">
    <drive>
      <device>/dev/vda</device>
      <disklabel>gpt</disklabel>
      <enable_snapshots t="boolean">false</enable_snapshots>
      <type t="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <software t="map">
    <install_recommended t="boolean">true</install_recommended>
    <instsource/>
    <packages t="list">
      <package>xfsprogs</package>
      <package>wicked</package>
      <package>sles-release</package>
      <package>sle-module-server-applications-release</package>
      <package>sle-module-containers-release</package>
      <package>sle-module-basesystem-release</package>
      <package>openssh</package>
      <package>numactl</package>
      <package>kexec-tools</package>
      <package>kdump</package>
      <package>irqbalance</package>
      <package>grub2</package>
      <package>glibc</package>
      <package>chrony</package>
      <package>autoyast2</package>
      <package>qemu-guest-agent</package>
    </packages>
    <patterns t="list">
      <pattern>base</pattern>
      <pattern>enhanced_base</pattern>
      <pattern>minimal_base</pattern>
      <pattern>yast2_basis</pattern>
      <pattern>yast2_server</pattern>
    </patterns>
    <products t="list">
      <product>SLES</product>
    </products>
  </software>
  <ssh_import>
    <copy_config t="boolean">false</copy_config>
    <import t="boolean">false</import>
  </ssh_import>
  <suse_register t="map">
    <addons t="list">
      <addon>
        <arch>x86_64</arch>
        <name>sle-module-basesystem</name>
        <release_type>nil</release_type>
        <version>${SLES_DECIMAL}</version>
      </addon>
      <addon>
        <arch>x86_64</arch>
        <name>sle-module-server-applications</name>
        <release_type>nil</release_type>
        <version>${SLES_DECIMAL}</version>
      </addon>
      <addon>
        <arch>x86_64</arch>
        <name>sle-module-containers</name>
        <release_type>nil</release_type>
        <version>${SLES_DECIMAL}</version>
      </addon>
    </addons>
    <do_registration t="boolean">true</do_registration>
    <install_updates t="boolean">true</install_updates>
    <reg_server>${RMT}</reg_server>
    <reg_server_cert_fingerprint_type>SHA1</reg_server_cert_fingerprint_type>
    <reg_server_cert_fingerprint>${RMTFINGER}</reg_server_cert_fingerprint>
    <slp_discovery t="boolean">false</slp_discovery>
  </suse_register>
  <timezone>
    <timezone>Europe/Berlin</timezone>
  </timezone>
  <users t="list">
    <user>
      <authorized_keys t="list">
        <listentry>${KEY}</listentry>
      </authorized_keys>
      <encrypted t="boolean">false</encrypted>
      <fullname>root</fullname>
      <gid>0</gid>
      <home>/root</home>
      <shell>/bin/bash</shell>
      <uid>0</uid>
      <user_password>password</user_password>
      <username>root</username>
    </user>
    <user>
      <authorized_keys t="list">
        <listentry>${KEY}</listentry>
      </authorized_keys>
      <encrypted t="boolean">false</encrypted>
      <fullname>${LOGIN_USER}</fullname>
      <gid>100</gid>
      <home>/home/${LOGIN_USER}</home>
      <shell>/bin/bash</shell>
      <uid>1000</uid>
      <user_password>password</user_password>
      <username>${LOGIN_USER}</username>
    </user>
  </users>
 <services-manager>
    <default_target>multi-user</default_target>
    <services>
      <enable t="list">
        <service>sshd</service>
      </enable>
    </services>
  </services-manager>
</profile>
_EOF_

    # Create new storage pool for new VM
    run "Creating storage pool" \
        virsh pool-create-as \
        --name="${VMNAME}" \
        --type=dir \
        --target="${VMDIR}"/"${VMNAME}" \
        || die "Could not create storage pool."

    # Add custom MAC Address if specified
    NETWORK_PARAMS="$(join ',' \
        $(param bridge "${BRIDGE}") \
        $(param model "${NETWORK_MODEL}") \
        $(param mac "${MACADDRESS}") \
        ${NETWORK_EXTRA})"

    # Assemble disk parameters.
    DISK_PARAMS="$(join ',' \
        "${DISK}" \
        $(param format "${DISK_FORMAT}") \
        $(param bus "${DISK_BUS}") \
	      $(param size "${DISK_SIZE}") \
        ${DISK_EXTRA})"

    # Omit the --graphics option to auto-detect.
    if [ "${GRAPHICS}" = 'auto' ]
    then
        GRAPHICS_PARAMS=""
    else
        GRAPHICS_PARAMS="$(join ',' \
            "${GRAPHICS}" \
            $(param port "${PORT}") \
            $(param listen "${GRAPHICS_LISTEN}") \
            ${GRAPHICS_EXTRA})"
    fi

    # Assemble virt-install options.
    NETWORK_OPTION="$(param --network "${NETWORK_PARAMS}")"
    DISK_OPTION="$(param --disk "${DISK_PARAMS}")"
    GRAPHICS_OPTION="$(param --graphics "${GRAPHICS_PARAMS}")"

    # Call virt-install to import the cloud image and create a new VM
    run "Installing the domain" \
        virt-install \
        --name="${VMNAME}" \
        --memory="${MEMORY}" \
        --vcpus="${CPUS}" \
        --cpu="${FEATURE}" \
        ${DISK_OPTION} \
        ${CI_ISO_OPTION} \
        ${NETWORK_OPTION} \
        --os-variant="${OS_VARIANT}" \
        --location="${ISOURL}" \
        --extra-args='autoyast=default' \
        --initrd-inject="${AUTOYAST_DATA}" \
        --noautoconsole \
        --wait \
        ${GRAPHICS_OPTION} \
        ${VIRT_INSTALL_EXTRA} \
        || die "Could not create domain with virt-install."

    virsh dominfo "${VMNAME}" &>> "${VMNAME}".log

    # Enable autostart if true
    if $AUTOSTART
    then
        outputn "Enabling autostart"
        virsh autostart \
            --domain "${VMNAME}" > /dev/null 2>&1 \
            && ok \
            || die "Could not enable autostart."
    fi

    MAC=$(virsh dumpxml "${VMNAME}" | awk -F\' '/mac address/ {print $2}')
    output "MAC address: ${MAC}"

    TIMEOUT=100
    START_TIME=$(date +%s)
    if [ -f "/var/lib/libvirt/dnsmasq/${BRIDGE}.status" ]
    then
        outputn "Waiting for domain to get an IP address"
        while true
        do
            IP=$(grep -B1 "${MAC}" /var/lib/libvirt/dnsmasq/"${BRIDGE}".status | head \
                -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//)
            if [ "${IP}" = "" ]
            then
                sleep 1
            else
                ok
                break
            fi
        done
        printf "\n"
        check_delete_known_host
    else
        while [[ $(virsh guestinfo "${VMNAME}" 2>&1) == *"error: Guest agent is not responding"* ]]
        do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [[ ${ELAPSED_TIME} -ge ${TIMEOUT} ]]; then
                echo "Timeout reached. QEMU agent not responding."
                break
            fi
            sleep  1
        done

        sleep 5        # Wait for DHCP lease
        IP=$(virsh guestinfo "${VMNAME}" --interface |awk -F': ' '/if.1.addr.0.addr/{print $2};')

        if [ "${IP}" = "" ]
        then
            output "Error getting IP address. Check your DHCP server or VM console"
        else
            output "IP address: ${IP}"
            check_delete_known_host
        fi
    fi

    echo "==============================================================================="
    output "SSH to ${VMNAME}: 'ssh ${LOGIN_USER}@${IP}' or 'ssh ${LOGIN_USER}@${VMNAME}'"
    echo "==============================================================================="
    CONSOLE=$(virsh domdisplay "${VMNAME}")
    # Workaround because VNC port number shown by virsh domdisplay is offset from 5900
    if [ "${GRAPHICS}" = 'vnc' ]
    then
        CONSOLE_NO_PORT=$(echo "${CONSOLE}" | cut -d ':' -f 1,2 -)
        CONSOLE_PORT=$(expr 5900 + $(echo "${CONSOLE}" | cut -d ':' -f 3 -))
        output "Console at ${CONSOLE_NO_PORT}:${CONSOLE_PORT}"
    else
        output "Console at ${CONSOLE}"
    fi
    output "DONE"

    # Remove the unnecessary autoyast files
    outputn "Cleaning up autoYaST files"
    rm -f "${AUTOYAST_DATA}" && ok

    popd
}

# Delete VM
function remove ()
{
    # Parse command line arguments
    while getopts ":l:L:hv" opt
    do
        case "$opt" in
            l ) IMAGEDIR="${OPTARG}" ;;
            L ) VMDIR="${OPTARG}" ;;
            v ) VERBOSE=1 ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-autoyast help remove'." ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to remove.\n"
        printf "Run 'kvm-install-autoyast help remove' for usage.\n"
        exit 1
    else
        VMNAME=$1
    fi

    delete_vm
}

function create ()
{
    # Parse command line arguments
    while getopts ":b:c:d:D:f:g:G:I:k:l:L:m:M:p:R:t:T:u:ahynv" opt
    do
        case "$opt" in
            a ) AUTOSTART="${OPTARG}" ;;
            b ) BRIDGE="${OPTARG}" ;;
            c ) CPUS="${OPTARG}" ;;
            d ) DISK_SIZE="${OPTARG}" ;;
            D ) DNSDOMAIN="${OPTARG}" ;;
            f ) FEATURE="${OPTARG}" ;;
            g ) GRAPHICS="${OPTARG}" ;;
            G ) NET_GW="${OPTARG}" ;;
            I ) NET_IP="${OPTARG}" ;;
            k ) PUBKEY="${OPTARG}" ;;
            l ) IMAGEDIR="${OPTARG}" ;;
            L ) VMDIR="${OPTARG}" ;;
            m ) MEMORY="${OPTARG}" ;;
            M ) MACADDRESS="${OPTARG}" ;;
            p ) PORT="${OPTARG}" ;;
            R ) NET_DNS="${OPTARG}" ;;
            t ) DISTRO="${OPTARG}" ;;
            T ) TIMEZONE="${OPTARG}" ;;
            u ) ADDITIONAL_USER="${OPTARG}" ;;
            y ) ASSUME_YES=1 ;;
            n ) ASSUME_NO=1 ;;
            v ) VERBOSE=1 ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-autoyast help create'." ;;
        esac
    done

    shift $((OPTIND - 1))

    # Yes (-y) and No (-n) are mutually exclusive.
    if [[ "${ASSUME_YES}" -eq 1 ]] && [[ "${ASSUME_NO}" -eq 1 ]]
    then
        printf "Please specify only one of -y or -n flags.\n"
        exit 1
    fi

    # After all options are processed, make sure only one variable is left (vmname)
    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to create.\n"
        printf "Run 'kvm-install-autoyast help create' for usage.\n"
        exit 1
    else
        VMNAME=$1
    fi

    #Set name of autoyast file
    AUTOYAST_DATA=autoinst.xml

    # Check for ssh key
    check_ssh_key

    # Set config variables for autoYaST profile
    set_vars

    # Verify the osinfo-db is up to date.
    check_os_variant

    # Check if domain already exists
    domain_exists "${VMNAME}"

    if [ "${DOMAIN_EXISTS}" -eq 1 ]; then
        echo -n "[WARNING] ${VMNAME} already exists.  Do you want to overwrite ${VMNAME} [y/N]? "
        if [ "${ASSUME_YES}" -eq 1 ]; then
            REPLY="y"
            echo $REPLY
        elif [ "${ASSUME_NO}" -eq 1 ]; then
            REPLY="n"
            echo $REPLY
        else
            read -r
        fi
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            delete_vm
        else
            echo -e "\nNot overwriting ${VMNAME}. Exiting..."
            exit 1
        fi
    fi

    # Finally, create requested VM
    create_vm
}

#--------------------------------------------------
# Main
#--------------------------------------------------

subcommand="${1:-none}"
[[ "${subcommand}" != "none" ]] && shift

case "${subcommand}" in
    none)
        usage
        ;;
    help)
        if [[ "${1:-none}" == "none" ]]; then
            usage
        elif [[ "$1" =~ ^create$|^remove$|^list$ ]]; then
            usage_subcommand "$1"
        else
            printf "'$1' is not a valid subcommand.\n\n"
            usage
        fi
        ;;
    list)
        virsh list --all
        exit 0
        ;;
    create|remove)
        if [[ "${1:-none}" == "none" ]]; then
            usage_subcommand "${subcommand}"
        elif [[ "$1" =~ ^help$ ]]; then
            usage_subcommand "${subcommand}"
        else
            set_defaults
            set_custom_defaults
            "${subcommand}" "$@"
            exit $?
        fi
        ;;
    *)
        die "'${subcommand}' is not a valid subcommand.  See 'kvm-install-autoyast help' for a list of subcommands."
        ;;
esac
